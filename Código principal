import clr

sys.path.append(r'C:\Program Files (86x)\IronPython 2.7\Lib')
import System
from System.Collections.Generic import List

clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import IFailuresPreprocessor, FailureSeverity, FailureProcessingResult
from Autodesk.Revit.DB import ElementId, FamilyInstance, Transaction, Structure, AssemblyInstance, ElementTransformUtils
from Autodesk.Revit.DB import Document, SpecTypeId, UnitUtils
from Autodesk.Revit.DB import XYZ

clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.GeometryConversion)

clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import Point

clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager

doc = DocumentManager.Instance.CurrentDBDocument
docUnitType = Document.GetUnits(doc).GetFormatOptions(SpecTypeId.Length).GetUnitTypeId()

####### FROM NOW ON THE CODE #######

class WarningFailureMessageClass(IFailuresPreprocessor):
    def PreprocessFailures(self, failuresAccessor):
        failureMessagesList = failuresAccessor.GetFailureMessages().GetEnumerator()
        for failure in failureMessagesList:
            if failure.GetSeverity() == FailureSeverity.Warning:
                failuresAccessor.DeleteWarning(failure)
        return FailureProcessingResult.Continue

def WarningFailureMessage(transaction):
    options = transaction.GetFailureHandlingOptions()
    options.SetFailuresPreprocessor(WarningFailureMessageClass())
    transaction.SetFailureHandlingOptions(options)

class Node:
    def __init__(self, value):
        self.left = None
        self.right = None
        self.value = value

class Grid:
    def __init__(self, width, length, height):
        self.elements = List[FamilyInstance]( )
        self.root = Node(Point.ByCoordinates(0, 0, height))
        self.Add(self.root, width, length)

    def Add(self, node, width, length):
        if length:
            if node.value.Y == self.root.value.Y:
                node.left = Node(Point.ByCoordinates(node.value.X + length[0], node.value.Y, node.value.Z))
                self.Add(node.left, width, length[1:])
                node.right = Node(Point.ByCoordinates(node.value.X, node.value.Y + width[0], node.value.Z))  
                self.Add(node.right, width[1:], length)
            elif width:
                node.left = Node(Point.ByCoordinates(node.value.X + length[0], node.value.Y, node.value.Z))
                node.right = Node(Point.ByCoordinates(node.value.X, node.value.Y + width[0], node.value.Z))
                self.Add(node.right, width[1:], length)
            else:
                node.left = Node(Point.ByCoordinates(node.value.X + length[0], node.value.Y, node.value.Z))         
        elif width: 
            node.right = Node(Point.ByCoordinates(node.value.X, node.value.Y + width[0], node.value.Z))
            self.Add(node.right, width[1:], length)

    def AddSapata(self, node):
        transaction = Transaction(doc, 'Colocar sapata')
        transaction.Start()
        instance = doc.Create.NewFamilyInstance(node.ToXyz(), sapata, Structure.StructuralType.NonStructural)
        transaction.Commit()
        self.elements.Add(instance)

    def AddSapatas(self, node):
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddSapatas(node.left)
                self.AddSapatas(node.right)
                self.AddSapata(node.value)
            elif node.right:
                self.AddSapatas(node.right)
                self.AddSapata(node.value)
            else:
                self.AddSapata(node.value)
        elif node.right:
            self.AddSapatas(node.right)
            self.AddSapata(node.value)
        else:
            self.AddSapata(node.value)

    def AddPoste(self, node, poste):
        transaction = Transaction(doc, 'Colocar poste')
        transaction.Start()
        instance = doc.Create.NewFamilyInstance(node.ToXyz(), poste, Structure.StructuralType.NonStructural)
        transaction.Commit()
        self.elements.Add(instance)

    def AddPostes(self, node):
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddPostes(node.left)
                self.AddPostes(node.right)
                self.AddPoste(node.value, poste)
            elif node.right:
                self.AddPostes(node.right)
                self.AddPoste(node.value, poste) if height - gridHeight >= 200 or node.value.X == self.root.value.X else None
                self.AddPoste(node.value, postes.get(27)) if height - gridHeight == 25 and node.value.X != self.root.value.X else None            
            else:
                self.AddPoste(node.value, poste)
        elif node.right:
            self.AddPostes(node.right)
            self.AddPoste(node.value, poste)
        else:
            self.AddPoste(node.value, poste)

    def AddTravessa(self, node1, node2):
        transaction = Transaction(doc, 'Colocar travessa')
        travessa = travessas.get(node1.DistanceTo(node2))
        direction = node2.ToXyz().Subtract(node1.ToXyz()).Normalize()
        transaction.Start()
        instance = doc.Create.NewFamilyInstance(node1.ToXyz(), travessa, direction, None, Structure.StructuralType.NonStructural)
        transaction.Commit()
        self.elements.Add(instance)

    def AddTravessas(self, node):
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddTravessas(node.left)
                self.AddTravessas(node.right)
                self.AddTravessa(node.value, node.right.value) if gridHeight < height or node.value.X == self.root.value.X else None
                self.AddTravessa(node.value, node.left.value)
            elif node.right:
                self.AddTravessas(node.right)
                self.AddTravessa(node.value, node.right.value) if gridHeight < height or node.value.X == self.root.value.X else None
                self.AddTravessa(node.value, node.left.value) if gridHeight < height else None
            else:
                self.AddTravessa(node.value, node.left.value)
        elif node.right:
            self.AddTravessas(node.right)
            self.AddTravessa(node.value, node.right.value)

    def AddDiagonal(self, node1, node2):
        transaction = Transaction(doc, 'Colocar diagonal')
        diagonal = diagonais.get(node1.DistanceTo(node2))
        direction = node2.ToXyz().Subtract(node1.ToXyz()).Normalize()
        transaction.Start()
        instance = doc.Create.NewFamilyInstance(node1.ToXyz(), diagonal, direction, None, Structure.StructuralType.NonStructural)
        transaction.Commit()
        self.elements.Add(instance)
        return False

    def AddDiagonais(self, node):
        global status
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddDiagonais(node.left)
                status = self.AddDiagonal(node.value, node.left.value) if status else True
                self.AddDiagonais(node.right)
                status = self.AddDiagonal(node.value, node.right.value) if status else True
            elif node.right:
                status = self.AddDiagonal(node.value, node.left.value) if status else True
                self.AddDiagonais(node.right)
                status = self.AddDiagonal(node.value, node.right.value) if status else True
            else:
                status = self.AddDiagonal(node.value, node.left.value) if status else True
        elif node.right:
            self.AddDiagonais(node.right)
            status = self.AddDiagonal(node.value, node.right.value) if status else True

    def AddPlataforma(self, node1, node2, length):
        distance = node1.DistanceTo(node2)
        vector = node2.ToXyz().Subtract(node1.ToXyz()).Normalize()
        direction = XYZ(1, 0, 0) if vector.IsAlmostEqualTo(XYZ(0, 1, 0)) else XYZ(0, 1, 0)
        node1 = node1.ToXyz()
        while distance >= 30:
            transaction = Transaction(doc, 'Colocar plataforma')
            width = 20 if distance == 30 or distance == 50 else 30  
            plataforma = str(width) + 'x' + str(length)
            transaction.Start()
            instance = doc.Create.NewFamilyInstance(node1, plataformas.get(plataforma), direction, None, Structure.StructuralType.NonStructural)
            transaction.Commit()
            self.elements.Add(instance)
            displacement = vector.Multiply(UnitUtils.ConvertToInternalUnits(width, docUnitType))
            node1 = node1.Add(displacement)
            distance -= width
        grid.CreateAssembly()

    def AddPlataformas(self, node):
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddPlataformas(node.left)
                self.AddPlataformas(node.right)
                if node.value.DistanceTo(node.right.value) <= node.value.DistanceTo(node.left.value):
                    length = int(node.value.DistanceTo(node.left.value))
                    self.AddPlataforma(node.value, node.right.value, length)
                else:
                    length = int(node.value.DistanceTo(node.right.value))
                    self.AddPlataforma(node.left.value, node.value, length)
            elif node.right:
                self.AddPlataformas(node.right)
                if node.value.DistanceTo(node.right.value) <= node.value.DistanceTo(node.left.value):
                    length = int(node.value.DistanceTo(node.left.value))
                    self.AddPlataforma(node.value, node.right.value, length)
                else:
                    length = int(node.value.DistanceTo(node.right.value))
                    self.AddPlataforma(node.left.value, node.value, length)

    def AddRodape(self, node1, node2):
        transaction = Transaction(doc, 'Colocar rodape')
        rodape = rodapes.get(node1.DistanceTo(node2))
        direction = node2.ToXyz().Subtract(node1.ToXyz()).Normalize()
        transaction.Start()
        instance = doc.Create.NewFamilyInstance(node1.ToXyz(), rodape, direction, None, Structure.StructuralType.NonStructural)
        transaction.Commit()
        self.elements.Add(instance)

    def AddRodapes(self, node):
        if node.left:
            if node.value.Y == self.root.value.Y:
                self.AddRodapes(node.left)
                self.AddRodapes(node.right)
                self.AddRodape(node.value, node.right.value) if node.value.X == self.root.value.X else None
                self.AddRodape(node.value, node.left.value)
            elif node.right:
                self.AddRodapes(node.right)
                self.AddRodape(node.value, node.right.value) if node.value.X == self.root.value.X else None
            else:
                self.AddRodape(node.value, node.left.value)
        elif node.right:
            self.AddRodapes(node.right)
            self.AddRodape(node.value, node.right.value)

    def CreateAssembly(self):
        transaction = Transaction(doc, 'Criar montagem')
        category = self.elements[0].Category
        identifiers = List[ElementId](e.Id for e in self.elements)
        transaction.Start()
        instance = AssemblyInstance.Create(doc, identifiers, category.Id)
        transaction.Commit()
        self.elements = List[FamilyInstance]( )
        return instance

width = IN[0][0]
length = IN[0][1]
height = 850

grid = poste = instance = transaction = status = None
gridHeight = copyHeight = 0

sapata = doc.GetElement(ElementId(5485437))

postes = {27: doc.GetElement(ElementId(5398275)),
          150: doc.GetElement(ElementId(5390514)),
          200: doc.GetElement(ElementId(5393190)),
          300: doc.GetElement(ElementId(5396352))}

travessas = {70: doc.GetElement(ElementId(5599967)),
             100: doc.GetElement(ElementId(5946370)),
             150: doc.GetElement(ElementId(6095714)),
             200: doc.GetElement(ElementId(6315189)),
             250: doc.GetElement(ElementId(6505546)),
             300: doc.GetElement(ElementId(6526771))}

diagonais = {70: doc.GetElement(ElementId(5210994)),
             100: doc.GetElement(ElementId(5223995)),
             150: doc.GetElement(ElementId(5249997)),
             200: doc.GetElement(ElementId(5262992)),
             250: doc.GetElement(ElementId(5275996)),
             300: doc.GetElement(ElementId(5289000))}

plataformas = {'20x70': doc.GetElement(ElementId(5296673)),
               '20x100': doc.GetElement(ElementId(5302702)),
               '20x150': doc.GetElement(ElementId(5308764)),
               '20x200': doc.GetElement(ElementId(5314861)),
               '20x250': doc.GetElement(ElementId(5320995)),
               '20x300': doc.GetElement(ElementId(5327166)),
               '30x70': doc.GetElement(ElementId(5332143)),
               '30x100': doc.GetElement(ElementId(5337146)),
               '30x150': doc.GetElement(ElementId(5342184)),
               '30x200': doc.GetElement(ElementId(5347261)),
               '30x250': doc.GetElement(ElementId(5352374)),
               '30x300': doc.GetElement(ElementId(5357528))}

rodapes = {70: doc.GetElement(ElementId(5415497)),
           100: doc.GetElement(ElementId(5416572)),
           150: doc.GetElement(ElementId(5417647)),
           200: doc.GetElement(ElementId(5420871)),
           250: doc.GetElement(ElementId(5421946)),
           300: doc.GetElement(ElementId(5423027))}

#Colocar sapatas
grid = Grid(width, length, 0)
grid.AddSapatas(grid.root)
grid.CreateAssembly()

#Colocar postes
grid = Grid(width, length, 25)
poste = postes.get(200) if height%200 <= 50 else postes.get(300)
grid.AddPostes(grid.root)
grid.CreateAssembly()

gridHeight = 225 if poste == postes.get(200) else 325
i = int((height + 25 - gridHeight) / 200)
if i:
    grid = Grid(width, length, gridHeight)
    poste = postes.get(200)
    grid.AddPostes(grid.root)
    instance = grid.CreateAssembly()
    copyHeight = 200
    i -= 1
    while i > 0:
        transaction = Transaction(doc, 'Copiar montagem de postes para cima')
        WarningFailureMessage(transaction)
        transaction.Start()
        ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, copyHeight).ToXyz())
        transaction.Commit()
        copyHeight += 200
        i -= 1

gridHeight += copyHeight
grid = Grid(width, length, gridHeight)
poste = postes.get(150) if gridHeight > height else postes.get(200)
grid.AddPostes(grid.root)
grid.CreateAssembly()

#Colocar travessas
gridHeight = max(height%200, 50)
grid = Grid(width, length, gridHeight)
grid.AddTravessas(grid.root)
instance = grid.CreateAssembly()

copyHeight = 150 if height%200 == 0 else 200
i = round((height - gridHeight) / 200.0)
while i > 0:
    transaction = Transaction(doc, 'Copiar montagem de travessas para cima')
    WarningFailureMessage(transaction)
    transaction.Start()
    ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, copyHeight).ToXyz())
    transaction.Commit()
    copyHeight += 200
    i -= 1

gridHeight = height + 50
grid = Grid(width, length, gridHeight)
grid.AddTravessas(grid.root)
instance = grid.CreateAssembly()

transaction = Transaction(doc, 'Guarda corpo')
WarningFailureMessage(transaction)
transaction.Start()
ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, 50).ToXyz())
ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, 100).ToXyz())
transaction.Commit()

#Colocar diagonais
if height >= 250:
    status = True
    gridHeight = max(height%200, 50)
    grid = Grid(width, length, gridHeight)
    grid.AddDiagonais(grid.root)
    instance = grid.CreateAssembly()
    
    gridHeight += 150 if height%200 == 0 else 200
    copyHeight = 350 if height%200 == 0 else 400
    i = int((height - gridHeight) / 400)
    while i > 0:
        transaction = Transaction(doc, 'Copiar montagem de diagonais para cima')
        WarningFailureMessage(transaction)
        transaction.Start()
        ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, copyHeight).ToXyz())
        transaction.Commit()
        copyHeight += 400
        i -= 1
        
    if height - gridHeight >= 200:
        status = False
        grid = Grid(width, length, gridHeight)
        grid.AddDiagonais(grid.root)
        instance = grid.CreateAssembly()
        
        gridHeight += 200
        copyHeight = 400
        i = int((height - gridHeight) / 400)
        while i > 0:
            transaction = Transaction(doc, 'Copiar montagem de diagonais para cima')
            WarningFailureMessage(transaction)
            transaction.Start()
            ElementTransformUtils.CopyElement(doc, instance.Id, Point.ByCoordinates(0, 0, copyHeight).ToXyz())
            transaction.Commit()
            copyHeight += 400
            i -= 1

#Colocar plataformas e rodapés
grid = Grid(width, length, height)
grid.AddPlataformas(grid.root)
grid.AddRodapes(grid.root)
grid.CreateAssembly()
